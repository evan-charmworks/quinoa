// *****************************************************************************
/*!
  \file      src/Inciter/transporter.ci
  \copyright 2012-2015, J. Bakosi, 2016-2018, Los Alamos National Security, LLC.
  \brief     Charm++ module interface file for Transporter
  \details   Charm++ module interface file for Transporter
*/
// *****************************************************************************

module transporter {

  include "Types.h";

  extern module boundaryconditions;

  namespace inciter {

    chare Transporter {
      entry Transporter();
      entry [reductiontarget] void load( uint64_t nelem );
      entry [reductiontarget] void refined();
      entry [reductiontarget] void centroid();
      entry [reductiontarget] void distributed();
      entry [reductiontarget] void flattened();
      entry [reductiontarget] void coord();
      entry [reductiontarget] void comfinal();
      entry [reductiontarget] void totalvol( tk::real v );
      entry [reductiontarget] void vol();
      entry [reductiontarget] void minstat( tk::real d[n], std::size_t n );
      entry [reductiontarget] void maxstat( tk::real d[n], std::size_t n );
      entry [reductiontarget] void sumstat( tk::real d[n], std::size_t n );
      entry [reductiontarget] void pdfstat( CkReductionMsg* msg );
      entry [reductiontarget] void aveCost( tk::real c );
      entry [reductiontarget] void stdCost( tk::real c );
      entry [reductiontarget] void diagnostics( CkReductionMsg* msg );
      entry [reductiontarget] void start();
      entry [reductiontarget] void next();
      entry [reductiontarget] void finish();

      entry void peread();
      entry void perefined();
      entry void pecentroid();

      entry void pepartitioned();
      entry void pedistributed();

      entry void peflattened();
      entry void pegather();
      entry void pequery();
      entry void pemask();
      entry void pereordered();
      entry void pebounds();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      // High-level overview of the dependency and asynchronous call structure
      // ---------------------------------------------------------------------
      //
      // Directed Acyclic Graph (DAG):
      // -----------------------------
      //
      // See src/Inciter/Transporter.h.
      //
      // Interpretation of the above DAG
      // -------------------------------
      // Control flow is from left to right and top to bottom.
      //
      // Only when all of (1) reading the mesh from file, (2) (optional) initial
      // mesh reinfment has been completed, and (3) the cell centroids have been
      // computed (if a geometric partitioner has been configured), the
      // mesh partitioning can be started.
      //
      // MinStat, MaxStat, SumStat, and PdfStat denote different global
      // reductions used to compute mesh cell statistics. Only when all of these
      // are and setting up the communication buffers have been completed will
      // they be echoed to screen at once, denoted by Stat.

      entry void wait4mesh() {
        when load_complete(), centroid_complete(), refine_complete()
          serial "mesh" { partition(); } };

      entry void wait4stat() {
        when minstat_complete(), maxstat_complete(), sumstat_complete(),
             pdfstat_complete(), com_complete() serial "stat" { stat(); } };

      entry void load_complete();
      entry void centroid_complete();
      entry void refine_complete();
      entry void minstat_complete();
      entry void maxstat_complete();
      entry void sumstat_complete();
      entry void pdfstat_complete();
      entry void com_complete();
    }

  } // inciter::

}
